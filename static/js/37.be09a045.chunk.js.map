{"version":3,"sources":["components/authentication/verify-code/VerifyCodeForm.js","pages/authentication/VerifyCode.js"],"names":["maxLength","object","target","value","length","slice","VerifyCodeForm","navigate","useNavigate","enqueueSnackbar","useSnackbar","VerifyCodeSchema","Yup","shape","code1","required","code2","code3","code4","code5","code6","formik","useFormik","initialValues","validationSchema","onSubmit","a","fakeRequest","variant","PATH_DASHBOARD","root","values","errors","isValid","touched","isSubmitting","handleSubmit","getFieldProps","autoComplete","noValidate","Stack","direction","spacing","justifyContent","Object","keys","map","item","OutlinedInput","type","placeholder","onInput","error","Boolean","inputProps","sx","p","textAlign","width","xs","sm","height","FormHelperText","style","LoadingButton","fullWidth","size","loading","mt","RootStyle","styled","Page","display","minHeight","alignItems","padding","theme","VerifyCode","title","LogoOnlyLayout","Container","Box","maxWidth","mx","Button","component","RouterLink","to","PATH_AUTH","login","startIcon","icon","arrowIosBackFill","mb","Typography","paragraph","color","align","Link","underline","onClick"],"mappings":"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","file":"static/js/37.be09a045.chunk.js","sourcesContent":["import * as Yup from 'yup';\nimport { useSnackbar } from 'notistack';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// material\nimport { OutlinedInput, FormHelperText, Stack } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n// utils\nimport fakeRequest from '../../../utils/fakeRequest';\n\n// ----------------------------------------------------------------------\n\n// eslint-disable-next-line consistent-return\nfunction maxLength(object) {\n  if (object.target.value.length > object.target.maxLength) {\n    return (object.target.value = object.target.value.slice(0, object.target.maxLength));\n  }\n}\n\nexport default function VerifyCodeForm() {\n  const navigate = useNavigate();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const VerifyCodeSchema = Yup.object().shape({\n    code1: Yup.number().required('Code is required'),\n    code2: Yup.number().required('Code is required'),\n    code3: Yup.number().required('Code is required'),\n    code4: Yup.number().required('Code is required'),\n    code5: Yup.number().required('Code is required'),\n    code6: Yup.number().required('Code is required')\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      code1: '',\n      code2: '',\n      code3: '',\n      code4: '',\n      code5: '',\n      code6: ''\n    },\n    validationSchema: VerifyCodeSchema,\n    onSubmit: async () => {\n      await fakeRequest(500);\n      enqueueSnackbar('Verify success', { variant: 'success' });\n      navigate(PATH_DASHBOARD.root);\n    }\n  });\n\n  const { values, errors, isValid, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack direction=\"row\" spacing={2} justifyContent=\"center\">\n          {Object.keys(values).map((item) => (\n            <OutlinedInput\n              key={item}\n              {...getFieldProps(item)}\n              type=\"number\"\n              placeholder=\"-\"\n              onInput={maxLength}\n              error={Boolean(touched[item] && errors[item])}\n              inputProps={{\n                maxLength: 1,\n                sx: {\n                  p: 0,\n                  textAlign: 'center',\n                  width: { xs: 36, sm: 56 },\n                  height: { xs: 36, sm: 56 }\n                }\n              }}\n            />\n          ))}\n        </Stack>\n\n        <FormHelperText error={!isValid} style={{ textAlign: 'right' }}>\n          {!isValid && 'Code is required'}\n        </FormHelperText>\n\n        <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting} sx={{ mt: 3 }}>\n          Verify\n        </LoadingButton>\n      </Form>\n    </FormikProvider>\n  );\n}\n","import { Icon } from '@iconify/react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport arrowIosBackFill from '@iconify/icons-eva/arrow-ios-back-fill';\n// material\nimport { styled } from '@mui/material/styles';\nimport { Box, Button, Link, Container, Typography } from '@mui/material';\n// layouts\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\n// routes\nimport { PATH_AUTH } from '../../routes/paths';\n// components\nimport Page from '../../components/Page';\nimport { VerifyCodeForm } from '../../components/authentication/verify-code';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled(Page)(({ theme }) => ({\n  display: 'flex',\n  minHeight: '100%',\n  alignItems: 'center',\n  padding: theme.spacing(12, 0)\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function VerifyCode() {\n  return (\n    <RootStyle title=\"Verify | Minimal UI\">\n      <LogoOnlyLayout />\n\n      <Container>\n        <Box sx={{ maxWidth: 480, mx: 'auto' }}>\n          <Button\n            size=\"small\"\n            component={RouterLink}\n            to={PATH_AUTH.login}\n            startIcon={<Icon icon={arrowIosBackFill} width={20} height={20} />}\n            sx={{ mb: 3 }}\n          >\n            Back\n          </Button>\n\n          <Typography variant=\"h3\" paragraph>\n            Please check your email!\n          </Typography>\n          <Typography sx={{ color: 'text.secondary' }}>\n            We have emailed a 6-digit confirmation code to acb@domain, please enter the code in below box to verify your\n            email.\n          </Typography>\n\n          <Box sx={{ mt: 5, mb: 3 }}>\n            <VerifyCodeForm />\n          </Box>\n\n          <Typography variant=\"body2\" align=\"center\">\n            Donâ€™t have a code? &nbsp;\n            <Link variant=\"subtitle2\" underline=\"none\" onClick={() => {}}>\n              Resend code\n            </Link>\n          </Typography>\n        </Box>\n      </Container>\n    </RootStyle>\n  );\n}\n"],"sourceRoot":""}