{"version":3,"sources":["utils/formatNumber.js","components/HeaderBreadcrumbs.js","utils/formatTime.js","components/_dashboard/user/account/AccountChangePassword.js","components/_dashboard/user/account/AccountGeneral.js","components/_dashboard/user/account/AccountSocialLinks.js","pages/dashboard/UserAccount.js"],"names":["fCurrency","number","numeral","format","Number","isInteger","fNumber","fShortenNumber","replace","fData","HeaderBreadcrumbs","links","action","heading","moreLink","sx","other","mb","display","alignItems","flexGrow","variant","gutterBottom","flexShrink","mt","isString","href","target","map","noWrap","fDate","date","Date","fDateTimeSuffix","AccountChangePassword","enqueueSnackbar","useSnackbar","ChangePassWordSchema","Yup","shape","oldPassword","required","newPassword","min","confirmNewPassword","oneOf","formik","useFormik","initialValues","validationSchema","onSubmit","values","setSubmitting","email","jwt_decode","localStorage","getItem","axios","post","process","then","res","console","log","data","flag","message","errors","touched","isSubmitting","handleSubmit","getFieldProps","Card","p","value","autoComplete","noValidate","Stack","spacing","TextField","fullWidth","type","label","error","Boolean","helperText","LoadingButton","loading","Dragger","Upload","AccountGeneral","useState","username","setUsername","firstName","setFirstName","lastName","setLastName","image","setImage","config","top","window","innerHeight","duration","UpdateUserSchema","displayName","enableReinitialize","setItem","token","useEffect","firstname","lastname","props","name","multiple","onChange","info","status","file","response","success","Grid","container","item","xs","md","py","px","textAlign","className","Box","justifyContent","style","width","height","border","borderRadius","marginTop","marginBottom","padding","src","rotate","CloudUploadOutlined","color","fontSize","my","e","disabled","onClick","facebookFill","instagramFilled","linkedinFill","twitterFill","UserAccount","themeStretch","useSettings","currentTab","setCurrentTab","dispatch","useDispatch","getCards","getAddressBook","getInvoices","getNotifications","getProfile","ACCOUNT_TABS","icon","roundAccountBox","component","roundVpnKey","Page","title","Container","maxWidth","PATH_DASHBOARD","root","user","Tabs","scrollButtons","allowScrollButtonsMobile","event","newValue","tab","Tab","disableRipple","capitalCase"],"mappings":"kJAAA,uKAKO,SAASA,EAAUC,GACxB,OAAOC,IAAQD,GAAQE,OAAOC,OAAOC,UAAUJ,GAAU,OAAS,WAO7D,SAASK,EAAQL,GACtB,OAAOC,IAAQD,GAAQE,SAGlB,SAASI,EAAeN,GAC7B,OAAOO,kBAAQN,IAAQD,GAAQE,OAAO,SAAU,MAAO,IAGlD,SAASM,EAAMR,GACpB,OAAOC,IAAQD,GAAQE,OAAO,W,yLCLjB,SAASO,EAAkB,GAAgE,IAA9DC,EAAK,EAALA,MAAOC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAAQ,EAAD,EAAEC,gBAAQ,MAAS,GAAE,EAAEC,EAAE,EAAFA,GAAOC,EAAK,iBACnG,OACE,eAAC,IAAG,CAACD,GAAE,aAAIE,GAAI,GAAMF,GAAK,UACxB,eAAC,IAAG,CAACA,GAAI,CAAEG,QAAS,OAAQC,WAAY,UAAW,UACjD,eAAC,IAAG,CAACJ,GAAI,CAAEK,SAAU,GAAI,UACvB,cAAC,IAAU,CAACC,QAAQ,KAAKC,cAAY,WAClCT,IAEH,cAAC,IAAY,aAACF,MAAOA,GAAWK,OAGjCJ,GAAU,cAAC,IAAG,CAACG,GAAI,CAAEQ,WAAY,GAAI,SAAEX,OAG1C,cAAC,IAAG,CAACG,GAAI,CAAES,GAAI,GAAI,SAChBC,mBAASX,GACR,cAAC,IAAI,CAACY,KAAMZ,EAAUa,OAAO,SAASN,QAAQ,QAAO,SAClDP,IAGHA,EAASc,KAAI,SAACF,GAAI,OAChB,cAAC,IAAI,CAACG,QAAM,EAAYH,KAAMA,EAAML,QAAQ,QAAQM,OAAO,SAASZ,GAAI,CAAEG,QAAS,SAAU,SAC1FQ,GADeA,a,kCCtC9B,iGAIO,SAASI,EAAMC,GACpB,OAAO5B,YAAO,IAAI6B,KAAKD,GAAO,WAWzB,SAASE,EAAgBF,GAC9B,OAAO5B,YAAO,IAAI6B,KAAKD,GAAO,wB,sgBCRjB,SAASG,IACtB,IAAQC,EAAoBC,cAApBD,gBAEFE,EAAuBC,MAAaC,MAAM,CAC9CC,YAAaF,MAAaG,SAAS,4BACnCC,YAAaJ,MAAaK,IAAI,EAAG,0CAA0CF,SAAS,4BACpFG,mBAAoBN,MAAaO,MAAM,CAACP,IAAQ,eAAgB,MAAO,0BAGnEQ,EAASC,YAAU,CACvBC,cAAe,CACbR,YAAa,GACbE,YAAa,GACbE,mBAAoB,IAEtBK,iBAAkBZ,EAClBa,SAAS,WAAD,4BAAE,WAAOC,EAAO,GAAD,iEAAiB,EAAbC,cACzBD,EAAOE,MAAQC,YAAWC,aAAaC,QAAQ,UAAUH,MACzDI,IAAMC,KAAK,GAAD,OAAIC,yCAAgC,2BAA2BR,GACtES,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAIG,MAChBF,QAAQC,IAAI,uCACU,YAAlBF,EAAIG,KAAKC,MACX9B,EAAgB,eAAgB,CAAEd,QAAS,YAGvB,SAAlBwC,EAAIG,KAAKC,MACX9B,EAAgB0B,EAAIG,KAAKE,QAAS,CAAE7C,QAAS,aAGnDyC,QAAQC,IAAIZ,GAAO,2CACpB,qDAfQ,KAkBHgB,EAA+DrB,EAA/DqB,OAAQC,EAAuDtB,EAAvDsB,QAASC,EAA8CvB,EAA9CuB,aAAcC,EAAgCxB,EAAhCwB,aAAcC,EAAkBzB,EAAlByB,cAErD,OACE,cAACC,EAAA,EAAI,CAACzD,GAAI,CAAE0D,EAAG,GAAI,SACjB,cAAC,IAAc,CAACC,MAAO5B,EAAO,SAC5B,cAAC,IAAI,CAAC6B,aAAa,MAAMC,YAAU,EAAC1B,SAAUoB,EAAa,SACzD,eAACO,EAAA,EAAK,CAACC,QAAS,EAAG3D,WAAW,WAAU,UACtC,cAAC4D,EAAA,EAAS,2BACJR,EAAc,gBAAc,IAChCS,WAAS,EACTL,aAAa,KACbM,KAAK,WACLC,MAAM,eACNC,MAAOC,QAAQhB,EAAQ5B,aAAe2B,EAAO3B,aAC7C6C,WAAYjB,EAAQ5B,aAAe2B,EAAO3B,eAG5C,cAACuC,EAAA,EAAS,2BACJR,EAAc,gBAAc,IAChCS,WAAS,EACTL,aAAa,KACbM,KAAK,WACLC,MAAM,eACNC,MAAOC,QAAQhB,EAAQ1B,aAAeyB,EAAOzB,aAC7C2C,WAAajB,EAAQ1B,aAAeyB,EAAOzB,aAAgB,iCAG7D,cAACqC,EAAA,EAAS,2BACJR,EAAc,uBAAqB,IACvCS,WAAS,EACTL,aAAa,KACbM,KAAK,WACLC,MAAM,uBACNC,MAAOC,QAAQhB,EAAQxB,oBAAsBuB,EAAOvB,oBACpDyC,WAAYjB,EAAQxB,oBAAsBuB,EAAOvB,sBAGnD,cAAC0C,EAAA,EAAa,CAACL,KAAK,SAAS5D,QAAQ,YAAYkE,QAASlB,EAAa,mC,4CChE3EmB,EAAYC,IAAZD,QAEO,SAASE,IACvB,IAAQvD,EAAoBC,cAApBD,gBACR,EAAgCwD,mBAAS,IAAG,mBAArCC,EAAQ,KAAEC,EAAW,KAC5B,EAAkCF,mBAAS,IAAG,mBAAvCG,EAAS,KAAEC,EAAY,KAC9B,EAAgCJ,mBAAS,IAAG,mBAArCK,EAAQ,KAAEC,EAAW,KAC5B,EAA0BN,mBAAS,IAAG,mBAA/BO,EAAK,KAAEC,EAAQ,KACtBjC,IAAQkC,OAAO,CAAEC,IAAKC,OAAOC,YAAc,IAAKC,SAAU,IAE1D,IAAMC,EAAmBnE,MAAaC,MAAM,CAC3CmE,YAAapE,MAAaG,SAAS,oBACnCqD,UAAWxD,MAAaG,SAAS,0BACjCuD,SAAU1D,MAAaG,SAAS,2BAG3BK,EAASC,YAAU,CACxB4D,oBAAoB,EACpB3D,cAAe,CACd0D,YAAad,EACbE,UAAWA,EACXE,SAAUA,EACV3C,MAAOC,YAAWC,aAAaC,QAAQ,UAAUH,MACjD6C,MAAOA,GAERjD,iBAAkBwD,EAClBvD,SAAS,WAAD,4BAAE,WAAOC,GAAM,iEACtBW,QAAQC,IAAIZ,GACZM,IACEC,KAAK,GAAD,OAAIC,yCAAgC,0BAA0BR,GAClES,MAAK,SAACC,GACgB,YAAlBA,EAAIG,KAAKC,OACZ9B,EAAgB,yEAA0E,CAAEd,QAAS,YACrGkC,aAAaqD,QAAQ,QAAS/C,EAAIG,KAAK6C,WAEvC,2CACH,mDAVQ,KAeFxC,EAA8CvB,EAA9CuB,aAAcC,EAAgCxB,EAAhCwB,aAAcC,EAAkBzB,EAAlByB,cAGpCuC,qBAAU,WACTrD,IAAMC,KAAK,GAAD,OAAIC,yCAAgC,uBAAuB,CAAEN,MAAOC,YAAWC,aAAaC,QAAQ,UAAUH,QACtHO,MAAK,SAAAC,GACLgC,EAAYhC,EAAIG,KAAKA,KAAK4B,UAC1BO,EAAStC,EAAIG,KAAKA,KAAKkC,OACvBH,EAAalC,EAAIG,KAAKA,KAAK+C,WAC3Bd,EAAYpC,EAAIG,KAAKA,KAAKgD,eAE1B,IAEH,IAAMC,EAAQ,CACbC,KAAM,QACNC,UAAU,EACVvG,OAAO,GAAD,OAAK+C,yCAAgC,gBAC3CyD,SAAQ,SAACC,GACR,IAAQC,EAAWD,EAAKE,KAAhBD,OAGO,SAAXA,GACHnB,EAASkB,EAAKE,KAAKC,SAASC,SAC5B3D,QAAQC,IAAIsD,EAAKE,KAAKC,SAASC,SAC/BvD,IAAQuD,QAAQ,GAAD,OAAIJ,EAAKE,KAAKL,KAAI,kCACZ,UAAXI,GACVpD,IAAQiB,MAAM,GAAD,OAAIkC,EAAKE,KAAKL,KAAI,2BAWlC,OACC,cAAC,IAAc,CAACxC,MAAO5B,EAAO,SAC7B,cAAC,IAAI,CAAC6B,aAAa,MAAMC,YAAU,EAAC1B,SAAUoB,EAAa,SAC1D,eAACoD,EAAA,EAAI,CAACC,WAAS,EAAC7C,QAAS,EAAE,UAC1B,cAAC4C,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE,SACxB,cAACtD,EAAA,EAAI,CAACzD,GAAI,CAAEgH,GAAI,GAAIC,GAAI,EAAGC,UAAW,UAAW,SAChD,qBAAKC,UAAU,kBAAiB,SAC/B,sBAAKA,UAAU,aAAY,UAC1B,cAACC,EAAA,EAAG,CAACpH,GAAI,CAAEG,QAAS,OAAQkH,eAAgB,UAAW,SACtD,qBAAKF,UAAU,kBACdG,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAASC,OAAQ,iBAAkBC,aAAc,OAAQC,UAAW,OAAQC,aAAc,OAAQC,QAAS,QAC5IC,IAAK,UAAGlF,yCAAgC,KAAMuC,MAEhD,cAAC,IAAO,CAAC4C,QAAM,WACd,cAACtD,EAAO,2BAAMyB,GAAK,aAClB,gCACC,cAAC8B,EAAA,EAAmB,CAACV,MAAO,CAAEW,MAAO,UAAWC,SAAU,UAC1D,mBAAGf,UAAU,sBAAqB,wEASzC,cAACR,EAAA,EAAI,CAACE,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE,SACxB,eAACtD,EAAA,EAAI,CAACzD,GAAI,CAAE0D,EAAG,GAAI,UAClB,cAACM,EAAA,EAAS,CAAChE,GAAI,CAAEmI,GAAI,QAAUlE,WAAS,EAACE,MAAM,aAAaR,MAAOoB,EAAWsB,SAAU,SAAC+B,GAAC,OAAKpD,EAAaoD,EAAExH,OAAO+C,UACrH,cAACK,EAAA,EAAS,CAAChE,GAAI,CAAEmI,GAAI,QAAUlE,WAAS,EAACE,MAAM,YAAYR,MAAOsB,EAAUoB,SAAU,SAAC+B,GAAC,OAAKlD,EAAYkD,EAAExH,OAAO+C,UAClH,cAACK,EAAA,EAAS,CAAChE,GAAI,CAAEmI,GAAI,QAAUlE,WAAS,EAACE,MAAM,WAAWR,MAAOkB,EAAUwB,SAAU,SAAC+B,GAAC,OAAKtD,EAAYsD,EAAExH,OAAO+C,UACjH,cAACK,EAAA,EAAS,aAAChE,GAAI,CAAEmI,GAAI,QAAUlE,WAAS,EAACoE,UAAQ,EAAClE,MAAM,iBAAoBX,EAAc,WAE1F,cAAC4D,EAAA,EAAG,CAACpH,GAAI,CAAES,GAAI,EAAGN,QAAS,OAAQkH,eAAgB,YAAa,SAC/D,cAAC9C,EAAA,EAAa,CAAC+D,QAxCJ,WACZvD,GAAcE,GAAaJ,GAC/B1B,IAAQiB,MAAM,8BAsC0BF,KAAK,SAAS5D,QAAQ,YAAYkE,QAASlB,EAAa,wC,wGC5GxF,IAAWiF,IAIX,IAAWC,IAIX,IAAWC,IAIX,IAAWC,ICRP,SAASC,IACtB,IAAQC,EAAiBC,cAAjBD,aACR,EAAoChE,mBAAS,WAAU,mBAAhDkE,EAAU,KAAEC,EAAa,KAC1BC,EAAWC,cAEjBlD,qBAAU,WACRiD,EAASE,eACTF,EAASG,eACTH,EAASI,eACTJ,EAASK,eACTL,EAASM,iBACR,CAACN,IAEJ,IAAMO,EAAe,CACnB,CACE5F,MAAO,UACP6F,KAAM,cAAC,IAAI,CAACA,KAAMC,IAAiBlC,MAAO,GAAIC,OAAQ,KACtDkC,UAAW,cAAC/E,EAAc,KAE5B,CACEhB,MAAO,kBACP6F,KAAM,cAAC,IAAI,CAACA,KAAMG,IAAapC,MAAO,GAAIC,OAAQ,KAClDkC,UAAW,cAACvI,EAAqB,MAQrC,OACE,cAACyI,EAAA,EAAI,CAACC,MAAM,sCAAqC,SAC/C,eAACC,EAAA,EAAS,CAACC,UAAUnB,GAAuB,KAAK,UAC/C,cAACjJ,EAAA,EAAiB,CAChBG,QAAQ,UACRF,MAAO,CACL,CAAEuG,KAAM,YAAaxF,KAAMqJ,IAAeC,MAC1C,CAAE9D,KAAM,OAAQxF,KAAMqJ,IAAeE,KAAKD,MAC1C,CAAE9D,KAAM,uBAIZ,eAACrC,EAAA,EAAK,CAACC,QAAS,EAAE,UAChB,cAACoG,EAAA,EAAI,CACHxG,MAAOmF,EACPsB,cAAc,OACd9J,QAAQ,aACR+J,0BAAwB,EACxBhE,SAtBc,SAACiE,EAAOC,GAC9BxB,EAAcwB,IAqBoB,SAEzBhB,EAAa1I,KAAI,SAAC2J,GAAG,OACpB,cAACC,EAAA,EAAG,CAACC,eAAa,EAAiBvG,MAAOwG,YAAYH,EAAI7G,OAAQ6F,KAAMgB,EAAIhB,KAAM7F,MAAO6G,EAAI7G,OAArE6G,EAAI7G,YAI/B4F,EAAa1I,KAAI,SAAC2J,GAEjB,OADkBA,EAAI7G,QAAUmF,GACZ,cAAC1B,EAAA,EAAG,UAAkBoD,EAAId,WAAhBc,EAAI7G","file":"static/js/29.40f564c0.chunk.js","sourcesContent":["import { replace } from 'lodash';\nimport numeral from 'numeral';\n\n// ----------------------------------------------------------------------\n\nexport function fCurrency(number) {\n  return numeral(number).format(Number.isInteger(number) ? '$0,0' : '$0,0.00');\n}\n\nexport function fPercent(number) {\n  return numeral(number / 100).format('0.0%');\n}\n\nexport function fNumber(number) {\n  return numeral(number).format();\n}\n\nexport function fShortenNumber(number) {\n  return replace(numeral(number).format('0.00a'), '.00', '');\n}\n\nexport function fData(number) {\n  return numeral(number).format('0.0 b');\n}\n","import { isString } from 'lodash';\nimport PropTypes from 'prop-types';\n// material\nimport { Box, Typography, Link } from '@mui/material';\n//\nimport { MBreadcrumbs } from './@material-extend';\n\n// ----------------------------------------------------------------------\n\nHeaderBreadcrumbs.propTypes = {\n  links: PropTypes.array,\n  action: PropTypes.node,\n  heading: PropTypes.string.isRequired,\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  sx: PropTypes.object\n};\n\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\n  return (\n    <Box sx={{ mb: 5, ...sx }}>\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n        <Box sx={{ flexGrow: 1 }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {heading}\n          </Typography>\n          <MBreadcrumbs links={links} {...other} />\n        </Box>\n\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\n      </Box>\n\n      <Box sx={{ mt: 2 }}>\n        {isString(moreLink) ? (\n          <Link href={moreLink} target=\"_blank\" variant=\"body2\">\n            {moreLink}\n          </Link>\n        ) : (\n          moreLink.map((href) => (\n            <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'table' }}>\n              {href}\n            </Link>\n          ))\n        )}\n      </Box>\n    </Box>\n  );\n}\n","import { format, getTime, formatDistanceToNow } from 'date-fns';\n\n// ----------------------------------------------------------------------\n\nexport function fDate(date) {\n  return format(new Date(date), 'MMMM dd');\n}\n\nexport function fDateTime(date) {\n  return format(new Date(date), 'dd MMM yyyy HH:mm');\n}\n\nexport function fTimestamp(date) {\n  return getTime(new Date(date));\n}\n\nexport function fDateTimeSuffix(date) {\n  return format(new Date(date), 'dd/MM/yyyy hh:mm p');\n}\n\nexport function fToNow(date) {\n  return formatDistanceToNow(new Date(date), {\n    addSuffix: true\n  });\n}\n","import * as Yup from 'yup';\nimport { useSnackbar } from 'notistack';\nimport { useFormik, Form, FormikProvider } from 'formik';\n// material\nimport { Stack, Card, TextField } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport axios from 'axios'\nimport jwt_decode from 'jwt-decode';\n\nexport default function AccountChangePassword() {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const ChangePassWordSchema = Yup.object().shape({\n    oldPassword: Yup.string().required('Old Password is required'),\n    newPassword: Yup.string().min(6, 'Password must be at least 6 characters').required('New Password is required'),\n    confirmNewPassword: Yup.string().oneOf([Yup.ref('newPassword'), null], 'Passwords must match')\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      oldPassword: '',\n      newPassword: '',\n      confirmNewPassword: ''\n    },\n    validationSchema: ChangePassWordSchema,\n    onSubmit: async (values, { setSubmitting }) => {\n      values.email = jwt_decode(localStorage.getItem('token')).email\n      axios.post(`${process.env.REACT_APP_SERVER_URL}/setting/changePassword`, values)\n        .then(res => {\n          console.log(res.data)\n          console.log(`Your password successfully updated.`);\n          if (res.data.flag === 'success') {\n            enqueueSnackbar('Save success', { variant: 'success' });\n\n          }\n          if (res.data.flag === 'fail') {\n            enqueueSnackbar(res.data.message, { variant: 'error' });\n          }\n        })\n      console.log(values)\n    }\n  });\n\n  const { errors, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\n\n  return (\n    <Card sx={{ p: 3 }}>\n      <FormikProvider value={formik}>\n        <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n          <Stack spacing={3} alignItems=\"flex-end\">\n            <TextField\n              {...getFieldProps('oldPassword')}\n              fullWidth\n              autoComplete=\"on\"\n              type=\"password\"\n              label=\"Old Password\"\n              error={Boolean(touched.oldPassword && errors.oldPassword)}\n              helperText={touched.oldPassword && errors.oldPassword}\n            />\n\n            <TextField\n              {...getFieldProps('newPassword')}\n              fullWidth\n              autoComplete=\"on\"\n              type=\"password\"\n              label=\"New Password\"\n              error={Boolean(touched.newPassword && errors.newPassword)}\n              helperText={(touched.newPassword && errors.newPassword) || 'Password must be minimum 6+'}\n            />\n\n            <TextField\n              {...getFieldProps('confirmNewPassword')}\n              fullWidth\n              autoComplete=\"on\"\n              type=\"password\"\n              label=\"Confirm New Password\"\n              error={Boolean(touched.confirmNewPassword && errors.confirmNewPassword)}\n              helperText={touched.confirmNewPassword && errors.confirmNewPassword}\n            />\n\n            <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n              Save Changes\n            </LoadingButton>\n          </Stack>\n        </Form>\n      </FormikProvider>\n    </Card>\n  );\n}\n","/* eslint-disable jsx-a11y/alt-text */\nimport { useState, useEffect } from 'react';\nimport * as Yup from 'yup';\nimport { useSnackbar } from 'notistack';\nimport { Form, FormikProvider, useFormik } from 'formik';\nimport { CloudUploadOutlined } from '@ant-design/icons';\n// eslint-disable-next-line camelcase\nimport jwt_decode from 'jwt-decode';\nimport axios from 'axios'\n// material\nimport { Box, Grid, Card, TextField } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// ----------------------------------------------------------------------\n\nimport { Upload, message } from 'antd'\nimport ImgCrop from 'antd-img-crop';\nconst { Dragger } = Upload;\n\nexport default function AccountGeneral() {\n\tconst { enqueueSnackbar } = useSnackbar();\n\tconst [username, setUsername] = useState(\"\");\n\tconst [firstName, setFirstName] = useState(\"\")\n\tconst [lastName, setLastName] = useState(\"\")\n\tconst [image, setImage] = useState(\"\");\n\tmessage.config({ top: window.innerHeight - 200, duration: 5 });\n\n\tconst UpdateUserSchema = Yup.object().shape({\n\t\tdisplayName: Yup.string().required('Name is required'),\n\t\tfirstName: Yup.string().required('First Name is required'),\n\t\tlastName: Yup.string().required('Last Name is required'),\n\t});\n\n\tconst formik = useFormik({\n\t\tenableReinitialize: true,\n\t\tinitialValues: {\n\t\t\tdisplayName: username,\n\t\t\tfirstName: firstName,\n\t\t\tlastName: lastName,\n\t\t\temail: jwt_decode(localStorage.getItem('token')).email,\n\t\t\timage: image,\n\t\t},\n\t\tvalidationSchema: UpdateUserSchema,\n\t\tonSubmit: async (values) => {\n\t\t\tconsole.log(values)\n\t\t\taxios\n\t\t\t\t.post(`${process.env.REACT_APP_SERVER_URL}/setting/updateAccount`, values)\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (res.data.flag === \"success\") {\n\t\t\t\t\t\tenqueueSnackbar('Update success. To see the updated infomation, please try login again.', { variant: 'success' });\n\t\t\t\t\t\tlocalStorage.setItem('token', res.data.token)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t}\n\t});\n\n\n\n\tconst { isSubmitting, handleSubmit, getFieldProps } = formik;\n\n\t// Upload\n\tuseEffect(() => {\n\t\taxios.post(`${process.env.REACT_APP_SERVER_URL}/setting/getAccount`, { email: jwt_decode(localStorage.getItem('token')).email })\n\t\t\t.then(res => {\n\t\t\t\tsetUsername(res.data.data.username)\n\t\t\t\tsetImage(res.data.data.image)\n\t\t\t\tsetFirstName(res.data.data.firstname)\n\t\t\t\tsetLastName(res.data.data.lastname)\n\t\t\t})\n\t}, []);\n\n\tconst props = {\n\t\tname: 'photo',\n\t\tmultiple: false,\n\t\taction: `${process.env.REACT_APP_SERVER_URL}/uploadimage`,\n\t\tonChange(info) {\n\t\t\tconst { status } = info.file;\n\t\t\tif (status !== 'uploading') {\n\t\t\t}\n\t\t\tif (status === 'done') {\n\t\t\t\tsetImage(info.file.response.success)\n\t\t\t\tconsole.log(info.file.response.success)\n\t\t\t\tmessage.success(`${info.file.name} file uploaded successfully.`);\n\t\t\t} else if (status === 'error') {\n\t\t\t\tmessage.error(`${info.file.name} file upload failed.`);\n\t\t\t}\n\t\t},\n\t};\n\n\tconst submitfun = () => {\n\t\tif (!firstName || !lastName || !username) {\n\t\t\tmessage.error(\"You must type all values.\")\n\t\t}\n\t}\n\n\treturn (\n\t\t<FormikProvider value={formik}>\n\t\t\t<Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n\t\t\t\t<Grid container spacing={3}>\n\t\t\t\t\t<Grid item xs={12} md={4}>\n\t\t\t\t\t\t<Card sx={{ py: 10, px: 3, textAlign: 'center' }}>\n\t\t\t\t\t\t\t<div className=\"form-group pb-5\">\n\t\t\t\t\t\t\t\t<div className='flex  mt-2' >\n\t\t\t\t\t\t\t\t\t<Box sx={{ display: 'flex', justifyContent: 'center' }}>\n\t\t\t\t\t\t\t\t\t\t<img className='mr-3 rounded-lg'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: \"160px\", height: \"160px\", border: '1px solid #eee', borderRadius: '100%', marginTop: '10px', marginBottom: '10px', padding: '10px' }}\n\t\t\t\t\t\t\t\t\t\t\tsrc={`${process.env.REACT_APP_SERVER_URL}/` + image} />\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t\t<ImgCrop rotate>\n\t\t\t\t\t\t\t\t\t\t<Dragger  {...props}>\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<CloudUploadOutlined style={{ color: '#796610', fontSize: '30px' }} />\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"ant-upload-text p-3\">Click or drag file to this area to upload</p>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</Dragger>\n\t\t\t\t\t\t\t\t\t</ImgCrop>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Grid>\n\n\t\t\t\t\t<Grid item xs={12} md={8}>\n\t\t\t\t\t\t<Card sx={{ p: 3 }}>\n\t\t\t\t\t\t\t<TextField sx={{ my: '20px' }} fullWidth label=\"First Name\" value={firstName} onChange={(e) => setFirstName(e.target.value)} />\n\t\t\t\t\t\t\t<TextField sx={{ my: '20px' }} fullWidth label=\"Last Name\" value={lastName} onChange={(e) => setLastName(e.target.value)} />\n\t\t\t\t\t\t\t<TextField sx={{ my: '20px' }} fullWidth label=\"Username\" value={username} onChange={(e) => setUsername(e.target.value)} />\n\t\t\t\t\t\t\t<TextField sx={{ my: '20px' }} fullWidth disabled label=\"Email Address\" {...getFieldProps('email')} />\n\n\t\t\t\t\t\t\t<Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n\t\t\t\t\t\t\t\t<LoadingButton onClick={submitfun} type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n\t\t\t\t\t\t\t\t\tSave Changes\n\t\t\t\t\t\t\t\t</LoadingButton>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Form>\n\t\t</FormikProvider>\n\t);\n}\n","import { Icon } from '@iconify/react';\nimport { useSnackbar } from 'notistack';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport twitterFill from '@iconify/icons-eva/twitter-fill';\nimport linkedinFill from '@iconify/icons-eva/linkedin-fill';\nimport facebookFill from '@iconify/icons-eva/facebook-fill';\nimport instagramFilled from '@iconify/icons-ant-design/instagram-filled';\n// material\nimport { Stack, Card, TextField, InputAdornment } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// redux\nimport { useSelector } from '../../../../redux/store';\n// utils\nimport fakeRequest from '../../../../utils/fakeRequest';\n\n// ----------------------------------------------------------------------\n\nconst SOCIAL_LINKS_OPTIONS = [\n  {\n    value: 'facebookLink',\n    icon: <Icon icon={facebookFill} height={24} />\n  },\n  {\n    value: 'instagramLink',\n    icon: <Icon icon={instagramFilled} height={24} />\n  },\n  {\n    value: 'linkedinLink',\n    icon: <Icon icon={linkedinFill} height={24} />\n  },\n  {\n    value: 'twitterLink',\n    icon: <Icon icon={twitterFill} height={24} />\n  }\n];\n\n// ----------------------------------------------------------------------\n\nexport default function AccountSocialLinks() {\n  const { enqueueSnackbar } = useSnackbar();\n  const { myProfile } = useSelector((state) => state.user);\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      facebookLink: myProfile.facebookLink,\n      instagramLink: myProfile.instagramLink,\n      linkedinLink: myProfile.linkedinLink,\n      twitterLink: myProfile.twitterLink\n    },\n    onSubmit: async (values, { setSubmitting }) => {\n      await fakeRequest(500);\n      setSubmitting(false);\n      alert(JSON.stringify(values, null, 2));\n      enqueueSnackbar('Save success', { variant: 'success' });\n    }\n  });\n\n  const { handleSubmit, isSubmitting, getFieldProps } = formik;\n\n  return (\n    <Card sx={{ p: 3 }}>\n      <FormikProvider value={formik}>\n        <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n          <Stack spacing={3} alignItems=\"flex-end\">\n            {SOCIAL_LINKS_OPTIONS.map((link) => (\n              <TextField\n                key={link.value}\n                fullWidth\n                {...getFieldProps(link.value)}\n                InputProps={{\n                  startAdornment: <InputAdornment position=\"start\">{link.icon}</InputAdornment>\n                }}\n              />\n            ))}\n\n            <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n              Save Changes\n            </LoadingButton>\n          </Stack>\n        </Form>\n      </FormikProvider>\n    </Card>\n  );\n}\n","import { Icon } from '@iconify/react';\nimport { capitalCase } from 'change-case';\nimport { useState, useEffect } from 'react';\nimport roundVpnKey from '@iconify/icons-ic/round-vpn-key';\nimport roundAccountBox from '@iconify/icons-ic/round-account-box';\n// material\nimport { Container, Tab, Box, Tabs, Stack } from '@mui/material';\n// redux\nimport { useDispatch } from '../../redux/store';\nimport { getCards, getProfile, getInvoices, getAddressBook, getNotifications } from '../../redux/slices/user';\n// routes\nimport { PATH_DASHBOARD } from '../../routes/paths';\n// hooks\nimport useSettings from '../../hooks/useSettings';\n// components\nimport Page from '../../components/Page';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\nimport {\n  AccountGeneral,\n  AccountChangePassword\n} from '../../components/_dashboard/user/account';\n\n// ----------------------------------------------------------------------\n\nexport default function UserAccount() {\n  const { themeStretch } = useSettings();\n  const [currentTab, setCurrentTab] = useState('general');\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getCards());\n    dispatch(getAddressBook());\n    dispatch(getInvoices());\n    dispatch(getNotifications());\n    dispatch(getProfile());\n  }, [dispatch]);\n\n  const ACCOUNT_TABS = [\n    {\n      value: 'general',\n      icon: <Icon icon={roundAccountBox} width={20} height={20} />,\n      component: <AccountGeneral />\n    },\n    {\n      value: 'change_password',\n      icon: <Icon icon={roundVpnKey} width={20} height={20} />,\n      component: <AccountChangePassword />\n    }\n  ];\n\n  const handleChangeTab = (event, newValue) => {\n    setCurrentTab(newValue);\n  };\n\n  return (\n    <Page title=\"User: Account Settings | Minimal-UI\">\n      <Container maxWidth={themeStretch ? false : 'lg'}>\n        <HeaderBreadcrumbs\n          heading=\"Account\"\n          links={[\n            { name: 'Dashboard', href: PATH_DASHBOARD.root },\n            { name: 'User', href: PATH_DASHBOARD.user.root },\n            { name: 'Account Settings' }\n          ]}\n        />\n\n        <Stack spacing={5}>\n          <Tabs\n            value={currentTab}\n            scrollButtons=\"auto\"\n            variant=\"scrollable\"\n            allowScrollButtonsMobile\n            onChange={handleChangeTab}\n          >\n            {ACCOUNT_TABS.map((tab) => (\n              <Tab disableRipple key={tab.value} label={capitalCase(tab.value)} icon={tab.icon} value={tab.value} />\n            ))}\n          </Tabs>\n\n          {ACCOUNT_TABS.map((tab) => {\n            const isMatched = tab.value === currentTab;\n            return isMatched && <Box key={tab.value}>{tab.component}</Box>;\n          })}\n        </Stack>\n      </Container>\n    </Page>\n  );\n}\n"],"sourceRoot":""}