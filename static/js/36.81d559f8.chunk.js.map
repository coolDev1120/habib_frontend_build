{"version":3,"sources":["components/authentication/reset-password/ResetPasswordForm.js","hooks/useIsMountedRef.js","pages/authentication/ResetPassword.js"],"names":["ResetPasswordForm","onSent","onGetEmail","resetPassword","useAuth","isMountedRef","isMounted","useRef","useEffect","current","useIsMountedRef","ResetPasswordSchema","Yup","shape","email","required","formik","useFormik","validationSchema","onSubmit","values","setErrors","setSubmitting","console","error","afterSubmit","message","errors","touched","isSubmitting","handleSubmit","getFieldProps","value","autoComplete","noValidate","Stack","spacing","Alert","severity","TextField","fullWidth","type","label","Boolean","helperText","LoadingButton","size","variant","loading","sx","backgroundColor","RootStyle","styled","Page","display","minHeight","alignItems","justifyContent","padding","theme","background","FormStyle","border","InnerBorder","borderColor","ResetPassword","useState","setEmail","sent","setSent","title","LogoOnlyLayout","Box","maxWidth","textAlign","mb","mx","height","Typography","gutterBottom","Button","component","RouterLink","to","PATH_AUTH","login","mt","paragraph","color","width","position","bottom","style","maxHeight","src"],"mappings":"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","file":"static/js/36.81d559f8.chunk.js","sourcesContent":["import * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// material\nimport { TextField, Alert, Stack } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// hooks\nimport useAuth from '../../../hooks/useAuth';\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\n\n// ----------------------------------------------------------------------\n\nResetPasswordForm.propTypes = {\n  onSent: PropTypes.func,\n  onGetEmail: PropTypes.func\n};\n\nexport default function ResetPasswordForm({ onSent, onGetEmail }) {\n  const { resetPassword } = useAuth();\n  const isMountedRef = useIsMountedRef();\n\n  const ResetPasswordSchema = Yup.object().shape({\n    email: Yup.string().email('Email must be a valid email address').required('Email is required')\n  });\n\n  const formik = useFormik({\n    validationSchema: ResetPasswordSchema,\n    onSubmit: async (values, { setErrors, setSubmitting }) => {\n      try {\n        await resetPassword(values.email);\n        if (isMountedRef.current) {\n          onSent();\n          onGetEmail(formik.values.email);\n          setSubmitting(false);\n        }\n      } catch (error) {\n        console.error(error);\n        if (isMountedRef.current) {\n          setErrors({ afterSubmit: error.message });\n          setSubmitting(false);\n        }\n      }\n    }\n  });\n\n  const { errors, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          {errors.afterSubmit && <Alert severity=\"error\">{errors.afterSubmit}</Alert>}\n\n          <TextField\n            fullWidth\n            {...getFieldProps('email')}\n            type=\"email\"\n            label=\"Enter your Email address\"\n            error={Boolean(touched.email && errors.email)}\n            helperText={touched.email && errors.email}\n          />\n\n          <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting} sx={{ backgroundColor: \"#9B7E4A\" }}>\n            Reset\n          </LoadingButton>\n        </Stack>\n      </Form>\n    </FormikProvider>\n  );\n}\n","import { useRef, useEffect } from 'react';\n\n// ----------------------------------------------------------------------\n\nexport default function useIsMountedRef() {\n  const isMounted = useRef(true);\n\n  useEffect(\n    () => () => {\n      isMounted.current = false;\n    },\n    []\n  );\n\n  return isMounted;\n}\n","/* eslint-disable jsx-a11y/alt-text */\nimport { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n// material\nimport { styled } from '@mui/material/styles';\nimport { Box, Button, Typography } from '@mui/material';\n// import Dialog from '@mui/material/Dialog';\n// import DialogActions from '@mui/material/DialogActions';\n// import DialogContent from '@mui/material/DialogContent';\n// import DialogContentText from '@mui/material/DialogContentText';\n// import DialogTitle from '@mui/material/DialogTitle';\n// layouts\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\n// routes\nimport { PATH_AUTH } from '../../routes/paths';\n// components\nimport Page from '../../components/Page';\nimport { ResetPasswordForm } from '../../components/authentication/reset-password';\nimport { MHidden } from '../../components/@material-extend';\n//\nimport { SentIcon } from '../../assets';\n\nconst RootStyle = styled(Page)(({ theme }) => ({\n  display: 'flex',\n  minHeight: '100%',\n  alignItems: 'center',\n  justifyContent: 'center',\n  padding: theme.spacing(12, 0),\n  background: '#BDA06C'\n}));\n\nconst FormStyle = styled(Page)(({ theme }) => ({\n  border: '8px solid #fff',\n}));\n\nconst InnerBorder = styled(Page)(({ theme }) => ({\n  border: '10px solid',\n  padding: '20px 70px',\n  borderColor: '#BDA06C',\n  background: '#fff'\n}));\n\n\n// ----------------------------------------------------------------------\n\nexport default function ResetPassword() {\n  const [email, setEmail] = useState('');\n  const [sent, setSent] = useState(false);\n\n\n  return (\n    <RootStyle title=\"Reset Password\">\n      <LogoOnlyLayout />\n\n      {/* <Container> */}\n      <FormStyle>\n        <InnerBorder>\n          <Box sx={{ maxWidth: 480 }}>\n            {!sent ? (\n              <>\n                <Typography variant=\"h3\" paragraph sx={{ textAlign: 'center' }}>\n                  Recover password\n                </Typography>\n                <Typography sx={{ color: 'text.secondary', mb: 5, textAlign: 'center' }}>\n                  Enter your Email and instructions will be sent to you!\n                </Typography>\n\n                <ResetPasswordForm onSent={() => setSent(true)} onGetEmail={(value) => setEmail(value)} />\n\n                <Button fullWidth size=\"large\" component={RouterLink} to={PATH_AUTH.login} sx={{ mt: 1 }}>\n                  Back\n                </Button>\n              </>\n            ) : (\n              <Box sx={{ textAlign: 'center' }}>\n                <SentIcon sx={{ mb: 5, mx: 'auto', height: 160 }} />\n\n                <Typography variant=\"h3\" gutterBottom>\n                  Request sent successfully\n                </Typography>\n                <Typography>\n                  We have sent a confirmation email to &nbsp;\n                  <strong>{email}</strong>\n                  <br />\n                  Please check your email.\n                </Typography>\n\n                <Button size=\"large\" variant=\"contained\" component={RouterLink} to={PATH_AUTH.login} sx={{ mt: 5, backgroundColor: \"#9B7E4A\" }} >\n                  Back\n                </Button>\n              </Box>\n            )}\n          </Box>\n        </InnerBorder>\n      </FormStyle>\n\n      {/* </Container> */}\n      <MHidden width=\"smDown\">\n        <Box sx={{ position: 'fixed', bottom: \"10px\", background: \"#fff\", width: '100%', display: 'flex', justifyContent: 'center' }}>\n          <img style={{ maxHeight: '150px', padding: '20px' }} src='/static/auth/btm_1.png' />\n          <img style={{ maxHeight: '150px', padding: '20px' }} src='/static/auth/btm_2.png' />\n        </Box>\n      </MHidden>\n    </RootStyle>\n  );\n}\n"],"sourceRoot":""}